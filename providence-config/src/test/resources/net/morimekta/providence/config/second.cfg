# The include is a relatve path from this file. Must always point at a file,
# no wildcards. Symbolic links should be supported. Multiple files may be
# included, but they have no effect on the "local" definition without using
# references.
include "first.cfg" as database

# TODO( # 1 ): Could be possible to have the config file "return" only one message,
# and all before needs to be "define name = ..." while the last is just:
# package.Type { ... } or (explicit type, no reference)
#
# reference { ... }  (has implicit type)
#   - or -
# package.Type : reference { ... }  (no implicit type)

# Each entry in the local definition (from now on just called the "entry")
# is a providence model object. For base models, make it reference the typename.
# If an included entry conflicts with the type reference, an exception will be
# thrown.
config.App {
    # references may point to anything in the same config file (starting with the
    # entry name), or any of the included files (starting with the "as" name). And
    # can (as long as the object is a providence model) reference arbitrarily deep
    # into the referenced model.
    db = database {
        jdbc {
            # Specifying value with the keyword 'undefined' will unset the value instead of
            # overriding it.
            url = undefined
            driver = "org.mysql.Driver"
        }
        service = "backend-percona-rw.mysql"
    }

    http {
        port = 8080
        contextPath = "/app"
    }
    admin {
        port = 8081

        enablePrometheus = true
    }
}
